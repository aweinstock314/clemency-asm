from collections import defaultdict
from ins_class import *
from packers import *

enc_fun_to_op = {
    enc_ra_rb_me: ['SMP'], 
    enc_ra_rb_rc: ['AD', 'ADC', 'ADCM', 'ADF', 'ADFM', 'ADM', 'AN', 'ANM', 'DMT', 'DV', 'DVF', 'DVFM', 'DVM', 'DVS', 'DVSM', 'MD', 'MDF', 'MDFM', 'MDM', 'MDS', 'MDSM', 'MU', 'MUF', 'MUFM', 'MUM', 'MUS', 'MUSM', 'OR', 'ORM', 'RL', 'RLM', 'RR', 'RRM', 'SA', 'SAM', 'SB', 'SBC', 'SBCM', 'SBF', 'SBFM', 'SBM', 'SL', 'SLM', 'SR', 'SRM', 'XR', 'XRM'], 
    enc_no_re: ['DBRK', 'HT', 'IR', 'RE', 'WT'], 
    enc_co_ra: ['BR', 'CR'], 
    enc_ra_rb_lo_ve_no_fl: ['FTI', 'FTIM', 'ITF', 'ITFM'], 
    enc_ra_rb_of_re: ['LDS', 'LDT', 'LDW', 'STS', 'STT', 'STW'],
    enc_ra_rb_of_re_i: ['LDSI','LDTI','LDWI','STSI','STTI','STWI'],
    enc_ra_rb_of_re_d: ['LDSD','LDTD','LDWD','STSD','STTD','STWD'],
    enc_of: ['CAR'], 
    enc_ra_rb_lo_ve_no_fl_al: ['RMP'], 
    enc_ra_rb_lo_ve_no_fl_al_tw: ['ZES', 'ZEW', 'SES', 'SEW'],
    enc_ra_im_al: ['MH', 'ML', 'MS'], 
    enc_ra_rb_sh_ve: ['CM', 'CMF', 'CMFM', 'CMM'], 
    enc_ra_no_fl: ['DI', 'EI', 'RF', 'SF'], 
    enc_lo: ['BRA', 'BRR', 'CAA'], 
    enc_co: ['B', 'C'], 
    enc_ra_rb_lo_op: ['BF', 'BFM', 'NG', 'NGF', 'NGFM', 'NGM', 'NT', 'NTM'], 
    enc_ra_wi_fl: ['RND', 'RNDM'], 
    enc_ra_im: ['CMI', 'CMIM'], 
    enc_ra_rb_im: ['ADCI', 'ADCIM', 'ADI', 'ADIM', 'ANI', 'DVI', 'DVIM', 'DVIS', 'DVISM', 'MDI', 'MDIM', 'MDIS', 'MDISM', 'MUI', 'MUIM', 'MUIS', 'MUISM', 'ORI', 'RLI', 'RLIM', 'RRI', 'RRIM', 'SAI', 'SAIM', 'SBCI', 'SBCIM', 'SBI', 'SBIM', 'SLI', 'SLIM', 'SRI', 'SRIM', 'XRI'],
}

enc_fun_to_decprime = {
    enc_ra_rb_me: lambda op, (_, _1, ra, rb, me, uf): Ins(op, uf, [Reg(ra), Reg(rb), MemoryFlags(me)]),
    enc_ra_rb_rc: lambda op, (_, _1, ra, rb, rc, uf): Ins(op, uf, [Reg(ra), Reg(rb), Reg(rc)]),
    enc_no_re: lambda op, (_, uf): Ins(op, uf, []),
    enc_co_ra: lambda op, (_, _1, co, ra, uf): Ins(inv_branch_ops[(op.lower(), co)], uf, [Reg(ra)]),
    enc_ra_rb_lo_ve_no_fl: lambda op, (_, _1, ra, rb, uf): Ins(op, uf, [Reg(ra), Reg(rb)]),
    enc_ra_rb_of_re: lambda op, (_, _1, ra, rb, mem, regcount, uf): Ins(op, uf, [Reg(ra), Mem(rb, mem, regcount+1)]),
    enc_ra_rb_of_re_i: lambda op, (_, _1, ra, rb, mem, regcount, uf): Ins(op, uf, [Reg(ra), Mem(rb, mem, regcount+1)]),
    enc_ra_rb_of_re_d: lambda op, (_, _1, ra, rb, mem, regcount, uf): Ins(op, uf, [Reg(ra), Mem(rb, mem, regcount+1)]),
    enc_of: lambda op, (_, of, uf): Ins(op, uf, [Imm(of)]),
    enc_ra_rb_lo_ve_no_fl_al: lambda op, (_, _1, ra, rb, uf): Ins(op, uf, [Reg(ra), Reg(rb)]),
    enc_ra_rb_lo_ve_no_fl_al_tw: lambda op, (_, _1, ra, rb, uf): Ins(op, uf, [Reg(ra), Reg(rb)]),
    enc_ra_im_al: lambda op, (_, ra, im, uf): Ins(op, uf, [Reg(ra), Imm(im)]),
    enc_ra_rb_sh_ve: lambda op, (_, ra, rb, uf): Ins(op, uf, [Reg(ra), Reg(rb)]),
    enc_ra_no_fl: lambda op, (_, _1, ra, uf): Ins(op, uf, [Reg(ra)]),
    enc_lo: lambda op, (_, lo, uf): Ins(op, uf, [Imm(lo)]),
    enc_co: lambda op, (_, co, of, uf): Ins(inv_branch_ops[(op.lower(), co)], uf, [Imm(of)]),
    enc_ra_rb_lo_op: lambda op, (_, _1, ra, rb, uf): Ins(op, uf, [Reg(ra), Reg(rb)]),
    enc_ra_wi_fl: lambda op, (_, _1, ra, uf): Ins(op, uf, [Reg(ra)]),
    enc_ra_im: lambda op, (_, ra, im, uf): Ins(op, uf, [Reg(ra), Imm(im)]),
    enc_ra_rb_im: lambda op, (_, _1, ra, rb, im, uf): Ins(op, uf, [Reg(ra), Reg(rb), Imm(im)]),
}

enc_op_to_fun = {}
for fun, ops in enc_fun_to_op.items():
    for op in ops:
        enc_op_to_fun[op] = fun

dec_fun_to_op = {enc_fun_to_dec_fun[enc]: enc_fun_to_op[enc] for enc in enc_fun_to_op}

dec_op_to_fun = {}
for fun, ops in dec_fun_to_op.items():
    for op in ops:
        dec_op_to_fun[op] = fun

op_bits = {
    'AD':['000000','0000'],
    'ADC':['0100000','0000'],
    'ADCI':['0100000','01'],
    'ADCIM':['0100010','01'],
    'ADCM':['0100010','0000'],
    'ADF':['0000001','0000'],
    'ADFM':['0000011','0000'],
    'ADI':['0000000','01'],
    'ADIM':['0000010','01'],
    'ADM':['0000010','0000'],
    'AN': ['0010100','0000'],
    'ANI':['0010100','01'],
    'ANM':['0010110','0000'],
    'B':['110000'],
    'BF':['101001100','1000000'],
    'BFM':['101001110','1000000'],
    'BR':['110010', '000'],
    'BRA':['111000100'],
    'BRR':['111000000'],
    'C':['110101'],
    'CAA':['111001100'], 
    'CAR':['111001000'], 
    'CM':['10111000'], 
    'CMF':['10111010'], 
    'CMFM':['10111110'], 
    'CMI':['10111001'], 
    'CMIM':['10111101'], 
    'CMM':['10111100'], 
    'CR':['110111','000'], 
    'DBRK':['111111111111111111'], 
    'DI':['101000000101','0'], 
    'DMT':['0110100','00000'], 
    'DV':['0001100','0000'], 
    'DVF':['0001101','0000'], 
    'DVFM':['0001111','0000'], 
    'DVI':['0001100','01'], 
    'DVIM':['0001110','01'], 
    'DVIS':['0001100','11'],
    'DVISM':['0001110','11'], 
    'DVM':['0001110','0000'], 
    'DVS':['0001100','0010'], 
    'DVSM':['0001110','0010'], 
    'EI':['101000000100','0'], 
    'FTI':['101000101','00000000'], 
    'FTIM':['101000111','00000000'], 
    'HT':['101000000011000000'], 
    'IR':['101000000001000000'], 
    'ITF':['101000100','00000000'], 
    'ITFM':['101000110','00000000'], 
    'LDS':['1010100','000'], 
    'LDSI':['1010100','000'], 
    'LDSD':['1010100','000'], 
    'LDT':['1010110','000'],
    'LDTI':['1010110','000'],
    'LDTD':['1010110','000'],
    'LDW':['1010101','000'], 
    'LDWI':['1010101','000'], 
    'LDWD':['1010101','000'], 
    'MD':['0010000','0000'], 
    'MDF':['0010001','0000'], 
    'MDFM':['0010011','0000'], 
    'MDI':['0010000','01'], 
    'MDIM':['0010010','01'], 
    'MDIS':['0010000','11'], 
    'MDISM':['0010010','11'], 
    'MDM':['0010010','0000'], 
    'MDS':['0010000','0010'], 
    'MDSM':['0010010','0010'], 
    'MH':['10001'], 
    'ML':['10010'], 
    'MS':['10011'], 
    'MU':['0001000','0000'], 
    'MUF':['0001001','0000'], 
    'MUFM':['0001011','0000'], 
    'MUI':['0001000','01'], 
    'MUIM':['0001010','01'], 
    'MUIS':['0001000','11'], 
    'MUISM':['0001010','11'], 
    'MUM':['0001010','0000'], 
    'MUS':['0001000','0010'], 
    'MUSM':['0001010','0010'],
    'NG':['101001100','0000000'],
    'NGF':['101001101','0000000'],
    'NGFM':['101001111','0000000'],
    'NGM':['101001110','0000000'],
    'NT':['101001100','0100000'],
    'NTM':['101001110','0100000'],
    'OR':['0011000','0000'],
    'ORI':['0011000','01'],
    'ORM':['0011010','0000'],
    'RE':['101000000000000000'],
    'RF':['101000001100','0'],
    'RL':['0110000','0000'],
    'RLI':['1000000','00'],
    'RLIM':['1000010','00'],
    'RLM':['0110010','0000'], 
    'RMP':['1010010','0000000000'],
    'RND':['101001100','000001100000'],
    'RNDM':['101001110','000001100000'],
    'RR':['0110001','0000'],
    'RRI':['1000001','00'],
    'RRIM':['1000011','00'], 
    'RRM':['0110011','0000'], 
    'SA':['0101101','0000'], 
    'SAI':['0111101','00'], 
    'SAIM':['0111111','00'], 
    'SAM':['0101111','0000'], 
    'SB':['0000100','0000'], 
    'SBC':['0100100','0000'], 
    'SBCI':['0100100','01'], 
    'SBCIM':['0100110','01'], 
    'SBCM':['0100110','0000'], 
    'SBF':['0000101','0000'], 
    'SBFM':['0000111','0000'],
    'SBI':['0000100','01'], 
    'SBIM':['0000110','01'], 
    'SBM':['0000110','0000'], 
    'SES':['101000000111','00000'], 
    'SEW':['101000001000','00000'], 
    'SF':['101000001011','0'], 
    'SL':['0101000','0000'], 
    'SLI':['0111000','00'], 
    'SLIM':['0111010','00'], 
    'SLM':['0101010','0000'], 
    'SMP':['1010010','0000000'], 
    'SR':['0101001','0000'], 
    'SRI':['0111001','00'], 
    'SRIM':['0111011','00'], 
    'SRM':['0101011','0000'], 
    'STS':['1011000','00'], 
    'STSI':['1011000','00'], 
    'STSD':['1011000','00'], 
    'STT':['1011010','000'], 
    'STTI':['1011010','000'], 
    'STTD':['1011010','000'], 
    'STW':['1011001','000'], 
    'STWI':['1011001','000'], 
    'STWD':['1011001','000'], 
    'WT':['101000000010000000'], 
    'XR':['0011100','0000'], 
    'XRI':['0011100','01'], 
    'XRM':['0011110','0000'], 
    'ZES':['101000001001', '00000'], 
    'ZEW':['101000001010','00000'],
}

op_bits = {k: [map(int, x) for x in v] for (k,v) in op_bits.items()}

op_fields = {op: enc_fun_to_fields[enc_op_to_fun[op]] for op in op_bits}
